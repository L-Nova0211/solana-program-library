/* Autogenerated SPL Token program C Bindings */

#pragma once

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct TokenInstruction TokenInstruction;

/**
 * Specifies the financial specifics of a token.
 */
typedef struct TokenTokenInfo {
    /**
     * Total supply of tokens.
     */
    uint64_t supply;
    /**
     * Number of base 10 digits to the right of the decimal place in the total supply.
     */
    uint64_t decimals;
} TokenTokenInfo;

typedef uint8_t TokenPubkey[32];

/**
 * A C representation of Rust's `std::option::Option`
 */
typedef enum TokenCOption_Pubkey_Tag {
    /**
     * No value
     */
    None_Pubkey,
    /**
     * Some value `T`
     */
    Some_Pubkey,
} TokenCOption_Pubkey_Tag;

typedef struct TokenSome_Body_Pubkey {
    TokenPubkey _0;
} TokenSome_Body_Pubkey;

typedef struct TokenCOption_Pubkey {
    TokenCOption_Pubkey_Tag tag;
    union {
        TokenSome_Body_Pubkey some;
    };
} TokenCOption_Pubkey;

/**
 * Represents a token type identified and identified by its public key.  Accounts
 * are associated with a specific token type and only accounts with
 * matching types my inter-opt.
 */
typedef struct TokenToken {
    /**
     * The total supply of tokens.
     */
    TokenTokenInfo info;
    /**
     * Optional token owner, used to mint new tokens.  The owner may only
     * be provided during token creation.  If no owner is present then the token
     * has a fixed supply and no further tokens may be minted.
     */
    TokenCOption_Pubkey owner;
} TokenToken;

/**
 * Delegation details.
 */
typedef struct TokenAccountDelegate {
    /**
     * The source account for the tokens.
     */
    TokenPubkey source;
    /**
     * The original maximum amount that this delegate account was authorized to spend.
     */
    uint64_t original_amount;
} TokenAccountDelegate;

/**
 * A C representation of Rust's `std::option::Option`
 */
typedef enum TokenCOption_AccountDelegate_Tag {
    /**
     * No value
     */
    None_AccountDelegate,
    /**
     * Some value `T`
     */
    Some_AccountDelegate,
} TokenCOption_AccountDelegate_Tag;

typedef struct TokenSome_Body_AccountDelegate {
    TokenAccountDelegate _0;
} TokenSome_Body_AccountDelegate;

typedef struct TokenCOption_AccountDelegate {
    TokenCOption_AccountDelegate_Tag tag;
    union {
        TokenSome_Body_AccountDelegate some;
    };
} TokenCOption_AccountDelegate;

/**
 * Account that holds or may delegate tokens.
 */
typedef struct TokenAccount {
    /**
     * The type of token this account holds.
     */
    TokenPubkey token;
    /**
     * Owner of this account.
     */
    TokenPubkey owner;
    /**
     * Amount of tokens this account holds.
     */
    uint64_t amount;
    /**
     * If `delegate`  is None, `amount` belongs to this account.
     * If `delegate` is Option<_>, `amount` represents the remaining allowance
     * of tokens this delegate is authorized to transfer from the `source` account.
     */
    TokenCOption_AccountDelegate delegate;
} TokenAccount;

/**
 * Token program states.
 */
typedef enum TokenState_Tag {
    /**
     * Unallocated state, may be initialized into another state.
     */
    Unallocated,
    /**
     * A token type.
     */
    Token,
    /**
     * An account that holds an amount of tokens or was delegated the authority to transfer
     * tokens on behalf of another account.
     */
    Account,
    /**
     * Invalid state, cannot be modified by the token program.
     */
    Invalid,
} TokenState_Tag;

typedef struct TokenToken_Body {
    TokenToken _0;
} TokenToken_Body;

typedef struct TokenAccount_Body {
    TokenAccount _0;
} TokenAccount_Body;

typedef struct TokenState {
    TokenState_Tag tag;
    union {
        TokenToken_Body token;
        TokenAccount_Body account;
    };
} TokenState;
